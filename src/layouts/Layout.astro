---
export interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet" />
    <title>{title}</title>
  </head>
  <body>
    <div class="scroll-indicator"></div>
    <slot />
  </body>
</html>

<style is:global>
  :root {
    --primary: #1e40af;
    --primary-light: #3b82f6;
    --primary-dark: #1e3a8a;
    --secondary: #64748b;
    --accent: #0ea5e9;
    --background: #f8fafc;
    --surface: #ffffff;
    --surface-alt: #f1f5f9;
    --text-primary: #0f172a;
    --text-secondary: #475569;
    --text-muted: #64748b;
    --border: #e2e8f0;
    --border-light: #f1f5f9;
    --success: #10b981;
    --warning: #f59e0b;
    --error: #ef4444;
    --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
    --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
    --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
    --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
  }

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  html {
    scroll-behavior: smooth;
  }

  body {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    background-color: var(--background);
    color: var(--text-primary);
    line-height: 1.6;
    overflow-x: hidden;
    font-weight: 400;
  }

  .scroll-indicator {
    position: fixed;
    top: 0;
    left: 0;
    width: 0%;
    height: 3px;
    background: linear-gradient(to right, var(--primary), var(--accent));
    z-index: 1000;
    transition: width 0.3s ease;
  }

  .section {
    padding: 5rem 0;
    position: relative;
  }

  .section:nth-child(even) {
    background-color: var(--surface-alt);
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1.5rem;
  }

  .section-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 3rem;
    position: relative;
    color: var(--text-primary);
    text-align: center;
  }

  .section-title::after {
    content: '';
    position: absolute;
    bottom: -0.5rem;
    left: 50%;
    transform: translateX(-50%);
    width: 4rem;
    height: 3px;
    background: linear-gradient(to right, var(--primary), var(--accent));
    border-radius: 2px;
  }

  .subsection-title {
    font-size: 2.5rem;
    font-weight: 700;
    position: relative;
    color: var(--text-primary);
    text-align: center;
  }

  .card {
    background: var(--surface);
    border-radius: 12px;
    padding: 2rem;
    box-shadow: var(--shadow-md);
    border: 1px solid var(--border);
    transition: all 0.3s ease;
  }

  .card:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-xl);
  }

  .btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    font-weight: 500;
    text-decoration: none;
    transition: all 0.3s ease;
    border: none;
    cursor: pointer;
    font-size: 0.875rem;
  }

  .btn-primary {
    background: var(--primary);
    color: white;
  }

  .btn-primary:hover {
    background: var(--primary-dark);
    transform: translateY(-1px);
  }

  .btn-outline {
    background: transparent;
    color: var(--primary);
    border: 1px solid var(--primary);
  }

  .btn-outline:hover {
    background: var(--primary);
    color: white;
  }

  .badge {
    display: inline-flex;
    align-items: center;
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .badge-primary {
    background: var(--primary-light);
    color: white;
  }

  .badge-secondary {
    background: var(--surface-alt);
    color: var(--text-secondary);
  }

  .badge-success {
    background: var(--success);
    color: white;
  }

  .badge-progress {
    background: var(--warning);
    color: white;
  }

  /* Responsive breakpoints */
  @media (max-width: 1024px) {
    .container {
      padding: 0 1rem;
    }
    
    .section {
      padding: 4rem 0;
    }
    
    .section-title {
      font-size: 2rem;
    }
  }

  @media (max-width: 768px) {
    .section {
      padding: 3rem 0;
    }
    
    .section-title {
      font-size: 1.75rem;
      margin-bottom: 2rem;
    }
    
    .card {
      padding: 1.5rem;
    }
  }

  @media (max-width: 640px) {
    .container {
      padding: 0 0.75rem;
    }
    
    .section {
      padding: 2.5rem 0;
    }
    
    .section-title {
      font-size: 1.5rem;
    }
    
    .card {
      padding: 1rem;
    }
  }
</style>

<script>
  // Scroll indicator
  function updateScrollIndicator() {
    const scrollTop = window.scrollY;
    const docHeight = document.documentElement.scrollHeight - window.innerHeight;
    const scrollPercent = (scrollTop / docHeight) * 100;
    const indicator = document.querySelector('.scroll-indicator') as HTMLElement;
    if (indicator) {
      indicator.style.width = scrollPercent + '%';
    }
  }

  window.addEventListener('scroll', updateScrollIndicator);

  // Navigation highlighting
  function highlightCurrentSection() {
    const sections = document.querySelectorAll('.section[id]');
    const navLinks = document.querySelectorAll('.nav-link');
    
    let currentSection = '';
    
    sections.forEach(section => {
      const htmlSection = section as HTMLElement;
      const sectionTop = htmlSection.offsetTop - 150;
      const sectionHeight = htmlSection.clientHeight;
      
      if (window.scrollY >= sectionTop && window.scrollY < sectionTop + sectionHeight) {
        currentSection = htmlSection.getAttribute('id')!;
      }
    });
    
    navLinks.forEach(link => {
      link.classList.remove('active');
      if (link.getAttribute('href') === `#${currentSection}`) {
        link.classList.add('active');
      }
    });
  }
  
  window.addEventListener('scroll', highlightCurrentSection);
  window.addEventListener('load', highlightCurrentSection);
</script>